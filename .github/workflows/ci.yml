name: CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
      continue-on-error: true
    
    - name: Clean Go module cache on restore failure
      if: failure()
      run: |
        rm -rf ~/go/pkg/mod
        go clean -modcache
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: make test
    
    - name: Run tests with race detection
      run: make test-race
    
    - name: Generate coverage report
      run: make test-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git describe
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
    
    - name: Build for all platforms
      run: make build-all
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: dist/
    
    - name: Create release archives
      run: |
        # Ensure we have the binaries
        ls -la dist/
        
        # Create archives directory
        mkdir -p dist/archives
        
        # Get version
        VERSION=$(git describe --tags --always --dirty)
        echo "Creating archives for version: $VERSION"
        
        # Change to dist directory and create archives
        cd dist
        
        # Create tar.gz for Unix systems
        if [ -f "jiraflow-linux-amd64" ]; then
          tar -czf archives/jiraflow-${VERSION}-linux-amd64.tar.gz jiraflow-linux-amd64
        fi
        
        if [ -f "jiraflow-linux-arm64" ]; then
          tar -czf archives/jiraflow-${VERSION}-linux-arm64.tar.gz jiraflow-linux-arm64
        fi
        
        if [ -f "jiraflow-darwin-amd64" ]; then
          tar -czf archives/jiraflow-${VERSION}-darwin-amd64.tar.gz jiraflow-darwin-amd64
        fi
        
        if [ -f "jiraflow-darwin-arm64" ]; then
          tar -czf archives/jiraflow-${VERSION}-darwin-arm64.tar.gz jiraflow-darwin-arm64
        fi
        
        # Create zip for Windows
        if [ -f "jiraflow-windows-amd64.exe" ]; then
          zip archives/jiraflow-${VERSION}-windows-amd64.zip jiraflow-windows-amd64.exe
        fi
        
        echo "Release archives created in dist/archives/"
        ls -la archives/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
    
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    
    - name: Run Gosec Security Scanner
      run: gosec ./...